/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package IRC_service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("form", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("toChannel", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("msg_time", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public String form; // required
  public List<String> toChannel; // required
  public String msg; // required
  public long msg_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FORM((short)1, "form"),
    TO_CHANNEL((short)2, "toChannel"),
    MSG((short)3, "msg"),
    MSG_TIME((short)4, "msg_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FORM
          return FORM;
        case 2: // TO_CHANNEL
          return TO_CHANNEL;
        case 3: // MSG
          return MSG;
        case 4: // MSG_TIME
          return MSG_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSG_TIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FORM, new org.apache.thrift.meta_data.FieldMetaData("form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("toChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_TIME, new org.apache.thrift.meta_data.FieldMetaData("msg_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    String form,
    List<String> toChannel,
    String msg,
    long msg_time)
  {
    this();
    this.form = form;
    this.toChannel = toChannel;
    this.msg = msg;
    this.msg_time = msg_time;
    setMsg_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetForm()) {
      this.form = other.form;
    }
    if (other.isSetToChannel()) {
      List<String> __this__toChannel = new ArrayList<String>(other.toChannel);
      this.toChannel = __this__toChannel;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    this.msg_time = other.msg_time;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.form = null;
    this.toChannel = null;
    this.msg = null;
    setMsg_timeIsSet(false);
    this.msg_time = 0;
  }

  public String getForm() {
    return this.form;
  }

  public Message setForm(String form) {
    this.form = form;
    return this;
  }

  public void unsetForm() {
    this.form = null;
  }

  /** Returns true if field form is set (has been assigned a value) and false otherwise */
  public boolean isSetForm() {
    return this.form != null;
  }

  public void setFormIsSet(boolean value) {
    if (!value) {
      this.form = null;
    }
  }

  public int getToChannelSize() {
    return (this.toChannel == null) ? 0 : this.toChannel.size();
  }

  public java.util.Iterator<String> getToChannelIterator() {
    return (this.toChannel == null) ? null : this.toChannel.iterator();
  }

  public void addToToChannel(String elem) {
    if (this.toChannel == null) {
      this.toChannel = new ArrayList<String>();
    }
    this.toChannel.add(elem);
  }

  public List<String> getToChannel() {
    return this.toChannel;
  }

  public Message setToChannel(List<String> toChannel) {
    this.toChannel = toChannel;
    return this;
  }

  public void unsetToChannel() {
    this.toChannel = null;
  }

  /** Returns true if field toChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetToChannel() {
    return this.toChannel != null;
  }

  public void setToChannelIsSet(boolean value) {
    if (!value) {
      this.toChannel = null;
    }
  }

  public String getMsg() {
    return this.msg;
  }

  public Message setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public long getMsg_time() {
    return this.msg_time;
  }

  public Message setMsg_time(long msg_time) {
    this.msg_time = msg_time;
    setMsg_timeIsSet(true);
    return this;
  }

  public void unsetMsg_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSG_TIME_ISSET_ID);
  }

  /** Returns true if field msg_time is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg_time() {
    return EncodingUtils.testBit(__isset_bitfield, __MSG_TIME_ISSET_ID);
  }

  public void setMsg_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSG_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FORM:
      if (value == null) {
        unsetForm();
      } else {
        setForm((String)value);
      }
      break;

    case TO_CHANNEL:
      if (value == null) {
        unsetToChannel();
      } else {
        setToChannel((List<String>)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case MSG_TIME:
      if (value == null) {
        unsetMsg_time();
      } else {
        setMsg_time((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FORM:
      return getForm();

    case TO_CHANNEL:
      return getToChannel();

    case MSG:
      return getMsg();

    case MSG_TIME:
      return Long.valueOf(getMsg_time());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FORM:
      return isSetForm();
    case TO_CHANNEL:
      return isSetToChannel();
    case MSG:
      return isSetMsg();
    case MSG_TIME:
      return isSetMsg_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_form = true && this.isSetForm();
    boolean that_present_form = true && that.isSetForm();
    if (this_present_form || that_present_form) {
      if (!(this_present_form && that_present_form))
        return false;
      if (!this.form.equals(that.form))
        return false;
    }

    boolean this_present_toChannel = true && this.isSetToChannel();
    boolean that_present_toChannel = true && that.isSetToChannel();
    if (this_present_toChannel || that_present_toChannel) {
      if (!(this_present_toChannel && that_present_toChannel))
        return false;
      if (!this.toChannel.equals(that.toChannel))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_msg_time = true;
    boolean that_present_msg_time = true;
    if (this_present_msg_time || that_present_msg_time) {
      if (!(this_present_msg_time && that_present_msg_time))
        return false;
      if (this.msg_time != that.msg_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToChannel()).compareTo(other.isSetToChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toChannel, other.toChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg_time()).compareTo(other.isSetMsg_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg_time, other.msg_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("form:");
    if (this.form == null) {
      sb.append("null");
    } else {
      sb.append(this.form);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toChannel:");
    if (this.toChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.toChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg_time:");
    sb.append(this.msg_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.form = iprot.readString();
              struct.setFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.toChannel = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.toChannel.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setToChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msg_time = iprot.readI64();
              struct.setMsg_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.form != null) {
        oprot.writeFieldBegin(FORM_FIELD_DESC);
        oprot.writeString(struct.form);
        oprot.writeFieldEnd();
      }
      if (struct.toChannel != null) {
        oprot.writeFieldBegin(TO_CHANNEL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.toChannel.size()));
          for (String _iter3 : struct.toChannel)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MSG_TIME_FIELD_DESC);
      oprot.writeI64(struct.msg_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetForm()) {
        optionals.set(0);
      }
      if (struct.isSetToChannel()) {
        optionals.set(1);
      }
      if (struct.isSetMsg()) {
        optionals.set(2);
      }
      if (struct.isSetMsg_time()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetForm()) {
        oprot.writeString(struct.form);
      }
      if (struct.isSetToChannel()) {
        {
          oprot.writeI32(struct.toChannel.size());
          for (String _iter4 : struct.toChannel)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetMsg_time()) {
        oprot.writeI64(struct.msg_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.form = iprot.readString();
        struct.setFormIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.toChannel = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.toChannel.add(_elem7);
          }
        }
        struct.setToChannelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msg_time = iprot.readI64();
        struct.setMsg_timeIsSet(true);
      }
    }
  }

}

